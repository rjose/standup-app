Standup App
===========
Rino Jose <@rjose>

Freewriting on the Standup App
------------------------------
Alright, so what do we want here? I want to see a list of the tracks that we're
currently running (I assume this is by team?). How do I handle logging in? I
need to do this at some point. Maybe for now, I just let you specify an email
address. But then I need someplace to store it. Maybe a cookie? Do we need to
encrypt this? I dunno. At any rate, that's something.

Given a set of tracks, I want to tap on one to see the current people working on
items in that track. We should sort them by who's here, who's working on tasks,
etc. On each person's detail page should be a list of the things they've been
assigned. Whoever's leading should be able to update effort left from the cell.
Maybe we have a tap control. Maybe we have something that can be dragged. Maybe
it's just buttons.

You should be able to go back to the list. We may need to work on how this
works. For now a back button should be fine.

OK, what are the risk items? I don't know how to handle updates. Should we
update JIRA directly? Should we put this into another spreadsheet? I most
certainly don't want to add this to the repo thereby making it another source of
truth. It needs to be JIRA or a spreadsheet. Ideally, it's JIRA. Let's see if we
can do this. If the update fails, what do we do? Who queues it up? Is it a fire
and forget? I don't want it to be queued up and then overwrite info from later.

Alright, let's sketch some screens out and see if I can get something running.
We'll want the server to provide the API for the calls. It doesn't have to be
JSON, but if there's code to parse it, then we might as well.

Implementation
~~~~~~~~~~~~~~
. Sketch out screens for app [X]
. Build app under simulator [X][X][X][X][X][X][X]<><><><>
. Mock up data on the server side [][][][]
. Push mocked data backwards [][][][][]
. Pull JIRA data [][][][][][]
. Condition data [][][][][][]
. Update JIRA data [][][][]
. Deploy onto app [][][][]
. Clean up the code [][][]


1 - Sketch out screens for app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OK, I have three screens: a track list, a team list, and a task list. Let me see
how quickly I can get something set up in Corona. I'll see if there's a sample
project I can start with. I'll take some notes in the next section.


2 - Build app under simulator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, let's start by finding a good starting point. Let's create a repo for
this and then move this spec over there. Done! Let's check in our sample code
and then keep going. Done!

OK, let's find a list item sample and start putting some stuff into it. OK, I'm
just poking around with this and not understanding it. Let's copy all of the
files over and let me revise them from there. OK, it's rendering. Let's change
some things. Alright, I have some data mocked into it. I'm about to try to show
the second level view. Let's check in before this. Alright, the next step is to
build another list view. This should be easy...Got the page to come in, but the
back button is missing. Let's do "back" in a different way. Actually, as soon as
I get the names to show, let's reorganize this code. OK, got the names to show.
Let's check in and then reorganize this code.

Let's start by moving exposed code to functions. Done. I got the tracks to
render again. Let's check in and then render a staff view. Done!

OK, let's do a little more code cleanup before we start. Done. Let's check in
and then move the tracks code and staff code to their own files. What I'm
thinking is to have each file have a "data" object that we can update whenever
the data changes. It's probably best to have this done via a function call than
to set it directly. Hmmm...I think I need to sketch out the app flow to make
sure this works the way it should.

Now, that I'm looking at this, it seems that the handlers should be defined in
main.lua since they will be app specific. Should both the render and the touch
functions be in main? Let's just pull the touch handlers over first since these
will change the main view. Done. Let's check in and then clean up main one more
time.

TODO: Add a back button to the title bar
TODO: Clean up more code
TODO: Figure out if objects are cleaned up when they go away
TODO: Separate construction of view from its render
TODO: Handle the global data in tracks_view.lua
TODO: Let's make the views into a stack. The transition animation should be
      separate

Risk Items
~~~~~~~~~~
- How to update JIRA

Nice to haves
~~~~~~~~~~~~~
It would be nice to have a way to display to people what the PM is doing. Maybe
the track list is shown and then as things are selected and updated, the view
changes. This will be for later.
